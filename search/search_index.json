{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Conference Site","text":"<p>Conference Site is a web application built with Django and PostgreSQL that allows users to register for scientific conferences, leave reviews, and view participant lists. Administrators can manage conference details and presentation results.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>User registration and authentication</li> <li>Browse and register for conferences</li> <li>Edit and delete conference registrations</li> <li>Leave reviews for attended conferences</li> <li>Admin panel for managing conferences and results</li> <li>Pagination and search functionality for conferences</li> <li>Responsive design with Bootstrap</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12</li> <li>PostgreSQL</li> <li>poetry</li> </ul>"},{"location":"#setup","title":"Setup","text":"<ol> <li>Clone the repository:</li> </ol> <p><code>bash    git clone https://github.com/kiraprint/conference-site.git    cd conference-site</code></p> <ol> <li>Create and activate a virtual environment, install all needed libs:</li> </ol> <p><code>bash    poetry shell</code></p> <ol> <li> <p>Configure the database:</p> </li> <li> <p>Create a PostgreSQL database and user.</p> </li> <li> <p>Update the <code>DATABASES</code> settings in <code>conference_site/settings.py</code> with your database credentials.</p> </li> <li> <p>Apply migrations:</p> </li> </ol> <p><code>bash    python manage.py migrate</code></p> <ol> <li>Create a superuser:</li> </ol> <p><code>bash    python manage.py createsuperuser</code></p> <ol> <li>Run the development server:</li> </ol> <p><code>bash    python manage.py runserver</code></p> <ol> <li> <p>Access the application:</p> </li> <li> <p>Open your web browser and go to <code>http://127.0.0.1:8000/</code>.</p> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<ul> <li>Register as a new user or log in if you already have an account.</li> <li>Browse the list of available conferences.</li> <li>Register for conferences you are interested in.</li> <li>Leave reviews for conferences you have attended.</li> <li>Administrators can log in to the admin panel at <code>http://127.0.0.1:8000/admin/</code> to manage conferences and results.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please fork the repository and submit a pull request with your changes.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Thanks to the Django community for their excellent documentation and resources.</li> <li>Bootstrap for providing a responsive design framework.</li> </ul>"},{"location":"lab1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439","text":""},{"location":"lab1/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 Python \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>socket</code>. \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0430\u0441\u043f\u0435\u043a\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u0435\u0442\u044f\u043c\u0438: \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 UDP \u0438 TCP, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 HTTP-\u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p>"},{"location":"lab1/#1-udp-","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: UDP \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440","text":""},{"location":"lab1/#_3","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"Hello, server\". \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0435\u0433\u043e, \u0430 \u0437\u0430\u0442\u0435\u043c \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \"Hello, client\".</p>"},{"location":"lab1/#_4","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ol> <p><code>bash    python server.py</code></p> <ol> <li>\u0412 \u0434\u0440\u0443\u0433\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:</li> </ol> <p><code>bash    python client.py</code></p>"},{"location":"lab1/#2-tcp","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f (TCP)","text":""},{"location":"lab1/#_5","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044f \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e.</p>"},{"location":"lab1/#_6","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ol> <p><code>bash    python server.py</code></p> <ol> <li>\u0412 \u0434\u0440\u0443\u0433\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:</li> </ol> <p><code>bash    python client.py</code></p> <ol> <li>\u041d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435: \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f (a, b, c).</li> </ol>"},{"location":"lab1/#3-http-html","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0432\u044b\u0434\u0430\u0447\u0435\u0439 HTML","text":""},{"location":"lab1/#_7","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0414\u043b\u044f GET-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.</p>"},{"location":"lab1/#_8","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ol> <p><code>bash    python server.py</code></p> <ol> <li>\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 <code>curl</code>, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441:</li> </ol> <p><code>bash    curl http://localhost:8080</code></p> <ol> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u0435\u0440\u043d\u0451\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.</li> </ol>"},{"location":"lab1/#4-tcp","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 (TCP)","text":""},{"location":"lab1/#_9","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \u043d\u0438\u043a\u043d\u0435\u0439\u043c. \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0435\u0442 \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c.</p>"},{"location":"lab1/#_10","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ol> <p><code>bash    python server.py</code></p> <ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 (\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445):</li> </ol> <p><code>bash    python client.py</code></p> <ol> <li>\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0438\u043a\u043d\u0435\u0439\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> </ol>"},{"location":"lab1/#5-http-","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438","text":""},{"location":"lab1/#_11","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b:</p> <ul> <li>GET: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 \u0438 \u0444\u043e\u0440\u043c\u043e\u0439 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>POST: \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443.</li> </ul>"},{"location":"lab1/#_12","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ol> <p><code>bash    python server.py</code></p> <ol> <li>\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443:</li> </ol> <p><code>http://localhost:8080</code></p> <ol> <li>\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0444\u043e\u0440\u043c\u0443.</li> </ol>"},{"location":"lab1/#_13","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>Python 3</li> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 (localhost)</li> </ul> <p>\u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430, \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c pyproject.toml:</p> <pre><code>poetry shell\n</code></pre>"},{"location":"lab2/","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0442\u043e\u043c\u0443, \u043a\u0430\u043a \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0443\u044e 2","text":""},{"location":"lab2/#1","title":"\u0428\u0430\u0433 1: \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 Django \u0438 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442:</li> </ol> <p><code>bash    pip install django    django-admin startproject conference_site    cd conference_site</code></p> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439:</li> </ol> <p><code>bash    python manage.py startapp conferences</code></p> <ol> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a PostgreSQL:</li> <li> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0434\u0440\u0430\u0439\u0432\u0435\u0440 \u0434\u043b\u044f PostgreSQL:</p> <p><code>bash  pip install psycopg2-binary</code></p> </li> <li> <p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 <code>settings.py</code>:</p> <p><code>python  DATABASES = {      'default': {          'ENGINE': 'django.db.backends.postgresql',          'NAME': 'your_db_name',          'USER': 'your_db_user',          'PASSWORD': 'your_db_password',          'HOST': 'localhost',          'PORT': '5432',      }  }</code></p> </li> <li> <p>\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438:</p> </li> </ol> <p><code>bash    python manage.py migrate</code></p>"},{"location":"lab2/#2_1","title":"\u0428\u0430\u0433 2: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","text":"<ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 <code>conferences/models.py</code>:</li> </ol> <p>```python    from django.db import models    from django.contrib.auth.models import User</p> <p>class Location(models.Model):        name = models.CharField(max_length=255)        address = models.CharField(max_length=255)        description = models.TextField()</p> <p>class Conference(models.Model):        title = models.CharField(max_length=255)        topics = models.TextField()        location = models.ForeignKey(Location, on_delete=models.CASCADE)        start_date = models.DateField()        end_date = models.DateField()        description = models.TextField()</p> <p>class ParticipationCondition(models.Model):        conference = models.OneToOneField(Conference, on_delete=models.CASCADE)        conditions = models.TextField()</p> <p>class Registration(models.Model):        user = models.ForeignKey(User, on_delete=models.CASCADE)        conference = models.ForeignKey(Conference, on_delete=models.CASCADE)        registered_on = models.DateTimeField(auto_now_add=True)</p> <p>class Review(models.Model):        conference = models.ForeignKey(Conference, on_delete=models.CASCADE)        user = models.ForeignKey(User, on_delete=models.CASCADE)        text = models.TextField()        rating = models.IntegerField(choices=[(i, str(i)) for i in range(1, 11)])        date_posted = models.DateTimeField(auto_now_add=True)</p> <p>class PresentationResult(models.Model):        registration = models.OneToOneField(Registration, on_delete=models.CASCADE)        is_recommended_for_publication = models.BooleanField(default=False)    ```</p> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438:</li> </ol> <p><code>bash    python manage.py makemigrations conferences    python manage.py migrate</code></p>"},{"location":"lab2/#3","title":"\u0428\u0430\u0433 3: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438","text":"<ol> <li> <p>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439:</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u043e\u0440\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 <code>conferences/forms.py</code>:</p> <p>```python  from django import forms  from django.contrib.auth.forms import UserCreationForm  from django.contrib.auth.models import User</p> <p>class UserRegisterForm(UserCreationForm):      email = forms.EmailField(required=True)</p> <pre><code> class Meta:\n     model = User\n     fields = ['username', 'email', 'password1', 'password2']\n</code></pre> <p>```</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 <code>conferences/views.py</code>:</p> <p>```python  from django.shortcuts import render, redirect  from django.contrib import messages  from .forms import UserRegisterForm</p> <p>def register(request):      if request.method == 'POST':          form = UserRegisterForm(request.POST)          if form.is_valid():              form.save()              username = form.cleaned_data.get('username')              messages.success(request, f'Account created for {username}!')              return redirect('login')      else:          form = UserRegisterForm()      return render(request, 'conferences/register.html', {'form': form})  ```</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0448\u0430\u0431\u043b\u043e\u043d <code>register.html</code> \u0432 <code>templates/conferences/</code>.</p> </li> </ol>"},{"location":"lab2/#3_1","title":"\u0428\u0430\u0433 3: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 (\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435)","text":"<ol> <li> <p>\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 (\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435):</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e:</p> <p>```python  @login_required  def register_for_conference(request, conference_id):      conference = get_object_or_404(Conference, id=conference_id)      registration, created = Registration.objects.get_or_create(user=request.user, conference=conference)</p> <pre><code> if created:\n     messages.success(request, f'You have successfully registered for {conference.title}.')\n else:\n     messages.info(request, f'You are already registered for {conference.title}.')\n\n return redirect('conference_detail', conference_id=conference_id)\n</code></pre> <p>```</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:</p> <p>```python  @login_required  def unregister_from_conference(request, conference_id):      conference = get_object_or_404(Conference, id=conference_id)      registration = Registration.objects.filter(conference=conference, user=request.user).first()</p> <pre><code> if registration:\n     registration.delete()\n     messages.success(request, f'You have successfully unregistered from {conference.title}.')\n else:\n     messages.error(request, 'You are not registered for this conference.')\n\n return redirect('conference_detail', conference_id=conference_id)\n</code></pre> <p>```</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b <code>conference_list.html</code> \u0438 <code>conference_detail.html</code> \u0432 <code>templates/conferences/</code>.</p> </li> <li> <p>\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432:</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432 <code>forms.py</code>:</p> <p>```python  from .models import Review</p> <p>class ReviewForm(forms.ModelForm):      class Meta:          model = Review          fields = ['text', 'rating']  ```</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430:</p> <p>```python  @login_required  def add_review(request, conference_id):      conference = get_object_or_404(Conference, id=conference_id)      registration = Registration.objects.filter(conference=conference, user=request.user).exists()</p> <pre><code> if not registration:\n     messages.error(request, 'You must be registered and have attended the conference to leave a review.')\n     return redirect('conference_detail', conference_id=conference_id)\n\n if request.method == 'POST':\n     form = ReviewForm(request.POST)\n     if form.is_valid():\n         review = form.save(commit=False)\n         review.conference = conference\n         review.user = request.user\n         review.save()\n         messages.success(request, 'Your review has been added!')\n         return redirect('conference_detail', conference_id=conference_id)\n else:\n     form = ReviewForm()\n return render(request, 'conferences/add_review.html', {'form': form, 'conference': conference})\n</code></pre> <p>```</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0448\u0430\u0431\u043b\u043e\u043d <code>add_review.html</code> \u0432 <code>templates/conferences/</code>.</p> </li> <li> <p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043d\u0435\u043b\u0438:</p> </li> <li> <p>\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 <code>admin.py</code>:</p> <p>```python  from django.contrib import admin  from .models import Conference, Location, Registration, PresentationResult</p> <p>@admin.register(Conference)  class ConferenceAdmin(admin.ModelAdmin):      list_display = ('title', 'location', 'start_date', 'end_date')      search_fields = ('title', 'topics')</p> <p>@admin.register(Location)  class LocationAdmin(admin.ModelAdmin):      list_display = ('name', 'address')      search_fields = ('name', 'address')</p> <p>@admin.register(Registration)  class RegistrationAdmin(admin.ModelAdmin):      list_display = ('user', 'conference', 'registered_on')      search_fields = ('user__username', 'conference__title')</p> <p>@admin.register(PresentationResult)  class PresentationResultAdmin(admin.ModelAdmin):      list_display = ('registration', 'is_recommended_for_publication')      list_filter = ('is_recommended_for_publication',)  ```</p> </li> </ol>"},{"location":"lab2/#4-url-","title":"\u0428\u0430\u0433 4: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432","text":"<ol> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 URL-\u0430\u0434\u0440\u0435\u0441\u0430 \u0432 <code>urls.py</code> \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f <code>conferences</code>:</li> </ol> <p>```python    from django.urls import path    from django.contrib.auth import views as auth_views    from . import views</p> <p>urlpatterns = [        path('register/', views.register, name='register'),        path('', views.conference_list, name='conference_list'),        path('conference//', views.conference_detail, name='conference_detail'),        path('conference//register/', views.register_for_conference, name='register_for_conference'),        path('conference//unregister/', views.unregister_from_conference, name='unregister_from_conference'),        path('conference//add_review/', views.add_review, name='add_review'),        path('login/', auth_views.LoginView.as_view(template_name='conferences/login.html'), name='login'),        path('logout/', auth_views.LogoutView.as_view(template_name='conferences/logout.html'), name='logout'),    ]    ```"},{"location":"lab2/#5","title":"\u0428\u0430\u0433 5: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432","text":"<ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d <code>base_generic.html</code> \u0432 <code>templates</code>:</li> </ol> <p>```html    </p> Conference Site Conference Site <ul> <li> Conferences </li>                    {% if user.is_authenticated %}                        <li>                                 {% csrf_token %}                                Logout </li>                    {% else %}                        <li> Login </li> <li> Register </li>                    {% endif %}                </ul>             {% block content %}            {% endblock %}         <p>```</p> <p>\u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e pygraphviz:</p> <p></p>"},{"location":"lab3/","title":"Lab 3","text":""},{"location":"lab3/#django-django-rest-framework","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Django \u0438 Django REST Framework","text":""},{"location":"lab3/#_1","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>\u042d\u0442\u043e\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0448\u0430\u0433\u0438 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0443\u0447\u043d\u044b\u043c\u0438 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django \u0438 Django REST Framework. \u041f\u0440\u043e\u0435\u043a\u0442 \u0431\u0443\u0434\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, API \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u043c, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439.</p>"},{"location":"lab3/#1-django","title":"\u0428\u0430\u0433 1: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 Django","text":"<ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 Django:</li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 Django, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0438 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442.</li> </ol> <pre><code>django-admin startproject myproject\n</code></pre> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435:</li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0438 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>conferences</code>.</li> </ol> <pre><code>python manage.py startapp conferences\n</code></pre> <ol> <li>\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 <code>INSTALLED_APPS</code>:</li> <li>\u0412 <code>settings.py</code> \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439.</li> </ol> <pre><code>INSTALLED_APPS = [\n    # ...\n    'conferences',\n    'rest_framework',\n    'djoser',\n    'rest_framework.authtoken',\n]\n</code></pre>"},{"location":"lab3/#2","title":"\u0428\u0430\u0433 2: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 <code>models.py</code> \u0432 <code>conferences</code>:</p> <pre><code>from django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\n# \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c User\nclass CustomUser(AbstractUser):\n    birthday = models.DateField(null=True, blank=True)\n    work_education = models.CharField(max_length=100, blank=True)\n\nclass Location(models.Model):\n    name = models.CharField(max_length=255)\n    address = models.CharField(max_length=512)\n    description = models.TextField()\n\n    def __str__(self):\n        return self.name\n\nclass Conference(models.Model):\n    title = models.CharField(max_length=255)\n    topics = models.TextField()\n    location = models.ForeignKey(Location, on_delete=models.CASCADE)\n    start_date = models.DateField()\n    end_date = models.DateField()\n    description = models.TextField()\n\n    def __str__(self):\n        return self.title\n\nclass ParticipationCondition(models.Model):\n    conference = models.OneToOneField(Conference, on_delete=models.CASCADE)\n    conditions = models.TextField()\n\n    def __str__(self):\n        return f'Conditions for {self.conference.title}'\n\nclass Registration(models.Model):\n    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)\n    conference = models.ForeignKey(Conference, on_delete=models.CASCADE)\n    registered_on = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.user.username} registered for {self.conference.title}'\n\nclass Review(models.Model):\n    conference = models.ForeignKey(Conference, on_delete=models.CASCADE)\n    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)\n    text = models.TextField()\n    rating = models.IntegerField(choices=[(i, str(i)) for i in range(1, 11)])\n    date_posted = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Review by {self.user.username} for {self.conference.title}'\n\nclass PresentationResult(models.Model):\n    registration = models.OneToOneField(Registration, on_delete=models.CASCADE)\n    is_recommended_for_publication = models.BooleanField(default=False)\n\n    def __str__(self):\n        return f'Result for {self.registration}'\n</code></pre>"},{"location":"lab3/#3","title":"\u0428\u0430\u0433 3: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432","text":"<ol> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</li> <li>\u0412 <code>settings.py</code> \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435:</li> </ol> <pre><code>AUTH_USER_MODEL = 'conferences.CustomUser'\n</code></pre> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f API:</li> <li>\u0412 <code>serializers.py</code> \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</li> </ol> <pre><code>from rest_framework import serializers\nfrom .models import Location, Conference, ParticipationCondition, Registration, Review, PresentationResult, CustomUser\n\nclass CustomUserCreateSerializer(UserCreateSerializer):\n    class Meta(UserCreateSerializer.Meta):\n        model = CustomUser\n        fields = ('id', 'username', 'password', 'email', 'first_name', 'last_name', 'birthday', 'work_education')\n        required_fields = ('username', 'password', 'email', 'first_name', 'last_name')\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u043b\u044f Conference\nclass ConferenceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Conference\n        fields = '__all__'\n</code></pre>"},{"location":"lab3/#4-api-django-rest-framework","title":"\u0428\u0430\u0433 4: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 API \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 Django REST Framework","text":"<ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 ViewSets \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439:</li> <li>\u0412 <code>views.py</code> \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 ViewSets \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</li> </ol> <pre><code>from rest_framework import viewsets\nfrom .models import Location, Conference, ParticipationCondition, Registration, Review, PresentationResult, CustomUser\nfrom .serializers import ConferenceSerializer, CustomUserCreateSerializer\n\nclass ConferenceViewSet(viewsets.ModelViewSet):\n    queryset = Conference.objects.all()\n    serializer_class = ConferenceSerializer\n</code></pre> <ol> <li>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0434\u043b\u044f API:</li> <li>\u0412 <code>urls.py</code> \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0432\u0441\u0435\u0445 ViewSet.</li> </ol> <pre><code>from rest_framework.routers import DefaultRouter\nfrom . import views\n\nrouter = DefaultRouter()\nrouter.register(r'conferences', views.ConferenceViewSet)\n\nurlpatterns = [\n    # \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b\n    path('', include(router.urls)),\n    path('api/auth/', include('djoser.urls')),\n    path('api/auth/', include('djoser.urls.authtoken')),\n]\n</code></pre>"},{"location":"lab3/#5-djoser","title":"\u0428\u0430\u0433 5: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 Djoser","text":"<ol> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Djoser \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438:</li> <li>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e Djoser \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0432 <code>settings.py</code>.</li> </ol> <pre><code>DJOSER = {\n    'USER_CREATE_PASSWORD_RETYPE': True,\n    'SERIALIZERS': {\n        'user_create': 'conferences.serializers.CustomUserCreateSerializer',\n    },\n}\n</code></pre>"},{"location":"lab3/#6","title":"\u0428\u0430\u0433 6: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439 \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0435\u0439","text":"<ol> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 Django Templates \u0438 DRF:</li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 Django \u0438\u043b\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u0441 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u043e\u043c \u043d\u0430 \u043b\u044e\u0431\u043e\u043c \u043d\u0443\u0436\u043d\u043e\u043c \u0432\u0430\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435.</p> </li> <li> <p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e:</p> </li> <li>\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u0432 <code>settings.py</code>.</li> </ol> <pre><code>REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10,\n}\n</code></pre>"},{"location":"lab3/#7-api","title":"\u0428\u0430\u0433 7: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 API","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 drf-yasg \u0434\u043b\u044f Swagger:</li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 drf-yasg \u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f Swagger \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</li> </ol> <pre><code>pip install drf-yasg\n</code></pre> <ol> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 Swagger \u0432 <code>urls.py</code>:</li> </ol> <pre><code>from rest_framework import permissions\nfrom drf_yasg.views import get_schema_view\nfrom drf_yasg import openapi\n\nschema_view = get_schema_view(\n    openapi.Info(\n        title=\"Conference API\",\n        default_version='v1',\n    ),\n    public=True,\n    permission_classes=[permissions.AllowAny],\n)\n\nurlpatterns += [\n    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n]\n</code></pre>"},{"location":"lab3/#_2","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 REST API \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438, \u0438 \u043d\u0430\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0432 django.</p>"},{"location":"leetcode/","title":"Leetcode","text":""},{"location":"leetcode/#task-1","title":"Task 1","text":"<p>Given a string s, find the length of the longest substring without repeating characters.</p> <p>Example 1:</p> <p>Input: s = \"abcabcbb\" Output: 3 Explanation: The answer is \"abc\", with the length of 3. Example 2:</p> <p>Input: s = \"bbbbb\" Output: 1 Explanation: The answer is \"b\", with the length of 1. Example 3:</p> <p>Input: s = \"pwwkew\" Output: 3 Explanation: The answer is \"wke\", with the length of 3. Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.</p>"},{"location":"leetcode/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        char_set = set()\n        left = 0\n        max_length = 0\n\n        for right in range(len(s)):\n            # If the character is already in the set, shrink the window from the left\n            while s[right] in char_set:\n                char_set.remove(s[left])\n                left += 1\n            # Add the current character to the set\n            char_set.add(s[right])\n            # Update the maximum length\n            max_length = max(max_length, right - left + 1)\n\n        return max_length\n\n</code></pre>"},{"location":"leetcode/#task-2","title":"Task 2","text":"<p>Given a string s, return the longest palindromic substring in s.</p> <p>Example 1:</p> <p>Input: s = \"babad\" Output: \"bab\" Explanation: \"aba\" is also a valid answer. Example 2:</p> <p>Input: s = \"cbbd\" Output: \"bb\"</p> <p></p>"},{"location":"leetcode/#solution_1","title":"Solution","text":"<pre><code>class Solution:\n    def longestPalindrome(self, s: str) -&gt; str:\n        def expand_around_center(left: int, right: int) -&gt; str:\n            # Expand as long as the characters on both sides are the same\n            while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            # Return the palindromic substring\n            return s[left + 1:right]\n\n        longest = \"\"\n        for i in range(len(s)):\n            # Check for odd-length palindromes (single character center)\n            odd_palindrome = expand_around_center(i, i)\n            # Check for even-length palindromes (two-character center)\n            even_palindrome = expand_around_center(i, i + 1)\n            # Update the longest palindrome found so far\n            longest = max(longest, odd_palindrome, even_palindrome, key=len)\n\n        return longest\n</code></pre>"},{"location":"leetcode/#task-3","title":"Task 3","text":"<p>You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.</p> <p>Return true if you can reach the last index, or false otherwise.</p> <p>Example 1:</p> <p>Input: nums = [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2:</p> <p>Input: nums = [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</p> <p>Constraints:</p> <p>1 &lt;= nums.length &lt;= 104 0 &lt;= nums[i] &lt;= 105</p> <p></p>"},{"location":"leetcode/#solution_2","title":"Solution","text":"<pre><code>class Solution:\n    def canJump(self, nums: List[int]) -&gt; bool:\n        farthest = 0\n        for i in range(len(nums)):\n            # If the current index is beyond the farthest reachable point, return False\n            if i &gt; farthest:\n                return False\n            # Update the farthest reachable point\n            farthest = max(farthest, i + nums[i])\n            # If the farthest reachable point exceeds or equals the last index, return True\n            if farthest &gt;= len(nums) - 1:\n                return True\n        return False\n\n</code></pre>"},{"location":"leetcode/#task-4","title":"Task 4","text":"<p>You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.</p> <p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</p> <p>You may assume that you have an infinite number of each kind of coin.</p> <p>Example 1:</p> <p>Input: coins = [1,2,5], amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1 Example 2:</p> <p>Input: coins = [2], amount = 3 Output: -1 Example 3:</p> <p>Input: coins = [1], amount = 0 Output: 0</p> <p>Constraints:</p> <p>1 &lt;= coins.length &lt;= 12 1 &lt;= coins[i] &lt;= 231 - 1 0 &lt;= amount &lt;= 104</p> <p>### Solution</p> <pre><code>class Solution:\n    def coinChange(self, coins: List[int], amount: int) -&gt; int:\n        # Initialize the DP array with a value greater than the maximum possible amount\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0  # Base case: 0 coins are needed to make up amount 0\n\n        # Iterate through each coin and update the DP table\n        for coin in coins:\n            for x in range(coin, amount + 1):\n                dp[x] = min(dp[x], dp[x - coin] + 1)\n\n        return dp[amount] if dp[amount] != float('inf') else -1\n\n\n</code></pre>"},{"location":"pr/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3.1","text":""},{"location":"pr/#1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</p> <pre><code>from project_second_app.models import *\ncar = Car.objects.create(state_number='A000AA199', brand='BMW', model='X5')\ncar = Car.objects.create(state_number='A001AA199', brand='BMW', model='X4')\ncar = Car.objects.create(state_number='A000AA198', brand='BMW', model='X5')\ncar = Car.objects.create(state_number='A004AA197', brand='BMW', model='M5')\ncar = Car.objects.create(state_number='A006AA197', brand='Audi', model='A80')\ncar = Car.objects.create(state_number='A007AA197', brand='Audi', model='S6')\nowner = Owner.objects.create(firstName=\"First\", lastName=\"Firstov\")\nowner = Owner.objects.create(firstName=\"Second\", lastName=\"Seconod\")\nowner = Owner.objects.create(firstName=\"Third\", lastName=\"Thirdov\")\nowner = Owner.objects.create(firstName=\"Fourth\", lastName=\"Fourthov\")\nowner = Owner.objects.create(firstName=\"Fith\", lastName=\"Fithov\")\nowner = Owner.objects.create(firstName=\"Sixth\", lastName=\"Sixthov\")\ncar = Car.objects.get(state_number='A000AA199')\nowner = Owner.objects.get(firstName='First')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2023-11-06', date_end='2024-03-12')\nowner = Owner.objects.get(firstName='Second')\ncar = Car.objects.get(state_number='A001AA199')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2023-12-06', date_end='2024-05-12')\ncar = Car.objects.get(state_number='A000AA198')\nowner = Owner.objects.get(firstName='Third')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-01-15', date_end='2024-05-12')\ncar = Car.objects.get(state_number='A004AA197')\nowner = Owner.objects.get(firstName='Fourth')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-03-15', date_end='2024-04-13')\ncar = Car.objects.get(state_number='A006AA197')\nowner = Owner.objects.get(firstName='Fith')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-01-25')\ncar = Car.objects.get(state_number='A007AA197')\nowner = Owner.objects.get(firstName='Sixth')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-06-21')\n\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111111', type='b', date_of_issue='2026-12-13')\nowner = Owner.objects.get(firstName='Fith')\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111112', type='b', date_of_issue='2030-05-13')\nowner = Owner.objects.get(firstName='Fourth')\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111113', type='b', date_of_issue='2032-05-13')\nowner = Owner.objects.get(firstName='Third')\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111114', type='b', date_of_issue='2033-02-25')\nowner = Owner.objects.get(firstName='Second')\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111115', type='b', date_of_issue='2025-02-25')\nowner = Owner.objects.get(firstName='First')\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111116', type='b', date_of_issue='2025-02-25')\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:</p> <pre><code>&gt;&gt;&gt; from project_second_app.models import *\n&gt;&gt;&gt; car = Car.objects.create(state_number='A000AA199', brand='BMW', model='X5')\n&gt;&gt;&gt; car = Car.objects.create(state_number='A001AA199', brand='BMW', model='X4')\n&gt;&gt;&gt; car = Car.objects.create(state_number='A000AA199', brand='BMW', model='X5')\n&gt;&gt;&gt; car = Car.objects.create(state_number='A004AA197', brand='BMW', model='M5') \n&gt;&gt;&gt; car = Car.objects.create(state_number='A006AA197', brand= 'Audi', model='A80') \n&gt;&gt;&gt; car = Car.objects.create(state_number='A007AA197', brand='Audi', model='S6') \n&gt;&gt;&gt; owner = Owner.objects.create(firstName=\"First\", lastName=\"Firstov\") \n&gt;&gt;&gt; owner = Owner.objects.create(firstName=\"Second\", lastName=\"Seconod\") \n&gt;&gt;&gt; owner = Owner.objects.create(firstName=\"Third\", lastName=\"Thirdov\") \n&gt;&gt;&gt; owner = Owner.objects.create(firstName=\"Fourth\", lastName=\"Fourthov\") \n&gt;&gt;&gt; owner = Owner.objects.create(firstName=\"Fith\", lastName=\"Fithov\") \n&gt;&gt;&gt; owner = Owner.objects.create(firstName=\"Sixth\", lastName=\"Sixthov\")\n&gt;&gt;&gt; car = Car.objects.get(state_number='A000AA199')\n&gt;&gt;&gt; owner = Owner.objects.get(firstName='First')\n&gt;&gt;&gt; ownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2023-11-06', date_end='2024-03-12') &gt;&gt;&gt; owner = Owner.objects.get(firstName='Second')\n&gt;&gt;&gt; car = Car.objects.get(state_number='A001AA199')\n&gt;&gt;&gt; ownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2023-12-06', date_end='2024-05-12') &gt;&gt;&gt; car = Car.objects.get(state_number='A000AA198')\n&gt;&gt;&gt; owner = Owner.objects.get(firstName='Third')\n&gt;&gt;&gt; ownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-01-15', date_end='2024-05-12')\n&gt;&gt;&gt; car = Car.objects.get(state_number='A004AA197') \n&gt;&gt;&gt; owner = Owner.objects.get(firstName='Fourth') \n&gt;&gt;&gt; ownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-03-15', date_end = '2024-04-13')\n&gt;&gt;&gt; car = Car.objects.get(state_number='A006AA197') \n&gt;&gt;&gt; owner = Owner.objects.get(firstName='Fith') \n&gt;&gt;&gt; ownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-01-25')\n&gt;&gt;&gt; car = Car.objects.get(state_number='A007AA197')\n&gt;&gt;&gt; owner = Owner.objects.get(firstName='Sixth')\n&gt;&gt;&gt; ownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-06-21')\n\n\n\n&gt;&gt;&gt; license = Driver License.objects.create(owner_id=owner, license_number='111111111', type='b',date_of_issue='2026-12-13') \n&gt;&gt;&gt; owner = Owner.objects.get(firstName='Fith')\n&gt;&gt;&gt; license = Driver License.objects.create(owner_id=owner, license_number='1111111112', type='b', date_of_issue='2030-05-13') \n&gt;&gt;&gt; owner = Owner.objects.get(firstName='Fourth')\n&gt;&gt;&gt; license = Driver License.objects.create(owner_id=owner, license_number='1111111113', type='b', date_of_issue='2032-05-13') \n&gt;&gt;&gt; owner = Owner.objects.get(firstName='Third')\n&gt;&gt;&gt; license = Driver License.objects.create(owner_id=owner, license_number='1111111113', type='b', date_of_issue='2033-02-25') \n&gt;&gt;&gt; owner = Owner.objects.get(firstName='Second')\n&gt;&gt;&gt; license = Driver License.objects.create(owner_id=owner, license_number='1111111113', type='b', date_of_issue='2025-02-25') \n&gt;&gt;&gt; owner = Owner.objects.get(firstName='First')\n&gt;&gt;&gt; license = Driver License.objects.create(owner_id=owner, license_number='1111111114', type='b', date_of_issue='2025-02-25')\n&gt;&gt;&gt; license = Driver License.objects.create(owner_id=owner, license_number='1111111114', type='b', date_of_issue='2025-02-25')\n&lt;QuerySet [&lt;Owner: Owner object (3)&gt;, &lt;Owner: Owner object (4)&gt;, &lt;Owner: Owner object (5)&gt;, &lt;Owner: Owner object (6)&gt;]&gt;\n</code></pre>"},{"location":"pr/#2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e:</p> <ul> <li>\u0413\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438</li> <li>\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c)</li> <li>\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435)</li> <li>\u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430)</li> <li>\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442)</li> <li>\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435)</li> </ul> <pre><code>Car.objects.filter(brand='BMW')\nOwner.objects.filter(firstName='First')\nowner_id = Owner.objects.get(firstName='First').id\nlicense = DriverLicense.objects.get(owner_id=1)\nowners = Owner.objects.filter(car_)\nowners = Owner.objects.filter(owner_car__car__color__contains='Red')\nowners = Owner.objects.filter(owner_car__date_start__contains='2024')\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:</p> <pre><code>&gt;&gt;&gt; owner_id = Owner.objects.get(firstName='First').id &gt;&gt;&gt; license = DriverLicense.objects.get(owner_id=1) &gt;&gt;&gt; license\n&lt;DriverLicense: DriverLicense object (6)&gt;\n&gt;&gt;&gt; owners = Owner.objects.filter(owner_car__car__color__contains='Red')\n&gt;&gt;&gt; owners\n&lt;QuerySet [&lt;Owner: Owner object (1)&gt;, &lt;Owner: Owner object (4)&gt;]&gt;\n&gt;&gt;&gt; owners = Owner.objects.filter(owner_car__date_start__contains='2024')\n&gt;&gt;&gt; owners\n&lt;QuerySet [&lt;Owner: Owner object (3)&gt;, &lt;Owner: Owner object (4)&gt;, &lt;Owner: Owner object (5)&gt;, &lt;Owner: Owner object (6)&gt;]&gt;\n</code></pre>"},{"location":"pr/#3","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<ul> <li>\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f</li> <li>\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435</li> <li>\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</li> <li>\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438</li> <li>\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f</li> </ul> <pre><code>DriverLicense.objects.aggregate(Min(\"date_of_issue\"))\nOwnership.objects.aggregate(Max(\"date_start\"))\nOwnership.objects.values(\"owner\").annotate(Count(\"id\"))\nCar.objects.values(\"brand\").annotate(Count(\"id\"))\nfrom django.db.models import F\nOwner.objects.annotate(issue_date=F('driverlicense__date_of_issue')).distinct().order_by('issue_date')\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:</p> <pre><code>&gt;&gt;&gt; from django.db.models import Min, Max\n&gt;&gt;&gt; Driver License.objects.annotate (Max(\"date_of_issue\"))\n&lt;QuerySet [&lt;Driver License: Driver License object (1)&gt;, &lt;DriverLicense: Driver License object (2)&gt;, &lt;Driver License: Driver License object (3)&gt;]&gt;\n&gt;&gt;&gt; Driver License.objects.aggregate (Max(\"date_of_issue\"))\n{'date_of_issue__max': datetime.date (2033, 2, 25)}\n&gt;&gt;&gt; Driver License.objects.aggregate (Min(\"date_of_issue\"))\n{'date_of_issue__min': datetime.date(2025, 2, 25)}\n&gt;&gt;&gt; Ownership.objects.aggregate (Max(\"date_start\"))\n{'date_start__max': datetime.date(2024, 6, 21)}\n&gt;&gt;&gt; Ownership.objects.values(\"owner\").annotate(Count(\"id\"))\n\n\n\n&gt;&gt;&gt; from django.db.models import Count\n&gt;&gt;&gt; Ownership.objects.values (\"owner\").annotate (Count(\"id\"))\n&lt;QuerySet [{'owner': 1, 'id__count': 1}, {'owner': 2, 'id__count': 1}, {'owner': 3, 'id__count': 1}, {'owner': 4, 'id__count': 1}, {'owner': 5, 'id__count': 1}, {'owner': 6, 'id__count':1}]&gt; \n&gt;&gt;&gt; Car.objects.values(\"brand\").annotate (Count(\"id\"))\n&lt;QuerySet [{'brand': 'Audi', 'id__count': 2}, {'brand': 'BMW', 'id__count': 4}]&gt;\n&gt;&gt;&gt; from django.db.models import F\n&gt;&gt;&gt; Owner.objects.annotate (issue_date=F('driverlicense__date_of_issue')).distinct().order_by('issue_date')\n&lt;QuerySet [&lt;Owner: Owner object (1)&gt;, &lt;Owner: Owner object (2)&gt;, &lt;Owner: Owner object (6)&gt;, &lt;Owner: Owner object (5)&gt;, &lt;Owner: Owner object (4)&gt;, &lt;Owner: Owner object (3)&gt;]&gt;\n</code></pre>"}]}